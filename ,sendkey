#!/bin/sh

log()  {
    [ $# -eq 1 ] && set -- 10 "[+] $1"
    printf '\033[38;5;%sm%s\033[m\n' "$1" "$2";
}
warn() { log 11 "[!] $1"; }
err()  { log  9 "[E] $1"; exit 1; }

usage() {
cat <<__USAGE__
Usage: ,mkpka [-U user] [-H hostname] [-P port] [-O ssh-options]
                [-i identity-file] [-k keysize] [-t keytype] [-p passphrase]
__USAGE__
}

help() {
usage

cat <<__HELP__
Sets up a PKA with a remote machine
    -U user             Username of remote machine
                          (Default: user)
    -H hostname         Hostname of remote machine
                          (Default: localhost)
    -P port             Port on which remote is listening
                          (Default: 22)
    -O ssh_options      SSH option to use while connecting to remote
    -i identity_file    The name of the identity file. If file with given name
                        does not exist it will be created.
                        If identity name is not given, a random name will be
                        used for the identity file with a format
                          user@hostname-XXXX
                        Stored at ~/.ssh/ on local machine
    -k keysize          Determines the size of the key generated
                          (Default: 4096)
    -t keytype          Specifies the type of key generated
                          (Default: rsa)
    -p passphrase       Passphrase for ssh-keygen
                          (Default: "")
    -h                  Display this help
__HELP__
}


share_identity() {
    log "Copying the \"${i}.pub\" identity file to ${U}@${H}"

    {
        command -v ssh-copy-id >/dev/null \
        && ssh-copy-id -p ${P} -i "${i}.pub" ${O} ${U}@${H}
    } || {
        warn "Command \"ssh-copy-id\" failed or does not exist (ret:$?)"
        log  "Manually copying the identity file to ${U}@${H}"

        ssh ${O} -p ${P} ${U}@${H} < "${i}.pub" \
            'cat >> ~/.ssh/authorized_keys' \
        || err "Failed to copy the identity file to ${U}@${H}"
    }

    log "Setting permissions for the identity files on ${U}@${H}"
    ssh ${O} -p ${P} ${U}@${H} \
        "chmod go-w ~ && chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys" \
    || err "Command \"ssh chmod\" failed (ret:$?)"

    log "Shared identity ${i} to ${U}@${H}"
}


gain_identity() {
    [ -z "$i" ] && {
        # shellcheck disable=SC2046
        set -- $(od -An -N2 -x /dev/random)
        i="$HOME/.ssh/${U}@${H}-${1}"

        warn "Using a random identity file \"${i}\""
    }

    [ -f "$i" ] || {
        warn "Identity file \"${i}\" does not exist"
        log  "Creating the identity file \"${i}\""

        ssh-keygen -t "$t" -b "$k" -f "$i" -N "$p" \
        || err "Command \"ssh-keygen\" failed (ret:$?)"
    }

    [ -f "${i}.pub" ] || err "Could not find ${i}.pub"

    log "Identity ${i} is being used"
    log "Setting permissions for the identity files locally"
    chmod 0600 "${i}" "${i}.pub" \
    || err "Command \"chmod\" failed (ret:$?)"
}


args() {
    while getopts :U:H:P:O:i:k:t:p:h opt; do case $opt in
        h)  help ; exit ;;
        \?) usage ; err "Unknown option : -${OPTARG}" ;;
        :)  err "Option -${OPTARG} needs a value" ;;
        *)  eval "${opt}"='${OPTARG}' ;;
    esac; done

    : "${U:=${USER}}" "${H:=localhost}" "${P:=22}" \
      "${k:=4096}" "${t:=rsa}" "${p:=}"

    O="${O} -o PubkeyAuthentication=no"
}

main() {
    args "$@"

    for cmd in ssh ssh-keygen; do
        command -v "${cmd}" >/dev/null \
        || err "Command \"${cmd}\" not found"
    done


    gain_identity
    share_identity
    log "${U}@${H} has accepted the identity ${i}"
    log "${i} has the key information"
    ssh-keygen -l -f "${i}"
    log "('v')/ Bye~"
}

main "$@"
